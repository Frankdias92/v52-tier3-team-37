// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id String @id @default(uuid())
  isAdmin Boolean
  email String @unique
  phoneNumber String?
  firstName String
  lastName String

  address Address? @relation(fields: [addressId], references: [id])
  addressId String?

  createdAt DateTime @default(now())
  requests ResidentRequest[]

  @@map("users")
}

model ResidentRequest {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String

  status RequestStatus @default(PENDING)

  requestedTimeSlotId String
  requestedTimeSlot TimeSlot @relation("RequestedTimeSlot", fields: [requestedTimeSlotId], references: [id], map: "resident_request_requested_timeslot_fkey")
  
  assignedTimeSlotId String
  assignedTimeSlot TimeSlot? @relation("AssignedTimeSlot", fields: [assignedTimeSlotId], references: [id], map: "resident_request_asssigned_timeslot_fkey")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("resident_requests")
}

model Address {
  id String @id @default(uuid())
  streetName String
  streetNumber String
  city String
  zipCode String
  latitude Float
  longitude Float

  users User[]

  @@map("addresses")
}

model TimeSlot {
  id String @id @default(uuid())
  startTime DateTime
  endTime DateTime
  description String?

  residentRequestsResidentTimeSlots ResidentRequest[] @relation("RequestedTimeSlot")
  residentRequestsAssignedTimeSlots ResidentRequest[] @relation("AssignedTimeSlot")

  @@map("time_slots")
}

enum RequestStatus {
  COMPLETED
  PENDING
  CANCELED
}